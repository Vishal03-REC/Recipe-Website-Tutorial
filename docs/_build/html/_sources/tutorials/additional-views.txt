.. index::
   single: views
   single: macros
   single: ajax
   single: json

.. _additional_views_chapter:

Building out additional views
===========================================

In this tutorial we will explore how to use the `views.py` file to 
define new views and associate templates and contexts with these new views.

Remember that `views.py` is located in the `recipewebsite` folder (I've highlighted it
with an '*'::

	RecipeWebsite/recipewebsite/
	├── __init__.py
	├── models.py
	├── static
	├── templates
	│   └── mytemplate.pt
	├── tests.py
	├── views.py*


We will include dummy data so that the views look realistic.

We will also look at the use of macros.

By convention, the procedure for adding a view is as follows:

- define the new view and associated template in the `views.py` file

- create the required template in the `templates` folder of the application

Views for our application
--------------------------

Based on the nature of our application we can predict some of views
that we will need.

The names below represent reasonable descriptive choices for our Views:

welcome
    a view which shows a welcome or home page, it is associated with the root of the website.

recipe
    when viewing an individual recipe, this view will be used to display all the information for that recipe.

ingredient
    search by ingredient, this view will return a list of recipes that have the particular ingredient.

submitrecipe
    It should be possible to add a new recipe using the 'submit a recipe' link.

registration
    There needs to be a registration page, so that new users can sign up

faq
     This will be a simple view that lists common questions about the web application

Defining a new view in `views.py`
-------------------------------------
We'll start by adding a single new view called `recipe_view`, it will use a template
called `recipe.pt`. We will add `recipe.pt` immediately afterwards.

::

	from pyramid.view import view_config
	from .models import RecipeSite

	@view_config(context=RecipeSite, renderer='templates/welcome.pt')
	def my_view(request):
	    return {'project':'RecipeWebsite'}

	@view_config(renderer='templates/recipe.pt',name='recipe_view')
	def recipe(request):
	    return {}

Adding a template in the `templates` folder
--------------------------------------------

In the `templates` folder we will add a new template called `recipe.pt`. To make it very 
simple we will just put the phrase, "I am the recipe template".

::

    <h1>I am the recipe template</h1>

View the new view in your browser
----------------------------------------

Start the application::

    pserve development.ini

Then visit localhost:6543/recipe_view, you should see something like the image below.

    .. image:: ../images/recipetemplate.jpg

Passing variables to the template
-----------------------------------

Variables are generally passed to Chameleon templates as key value pairs of a python dictionary.
Notice how this approach is used to define the 'project' in the root template `my_view`.

::

	@view_config(context=RecipeSite, renderer='templates/welcome.pt')
		def my_view(request):
		    return {'project':'RecipeWebsite'}

Creating a master templates
------------------------------

After a while we begin to see things that are common to all templates. The best approach
to dealing with this is to create a global or master template. In our case the `welcome.pt` template
is a good starting point.

Based on our mockups, most pages will be simpler than the front page. 

.. image:: ../images/recipewebsite-template-innerpage.png

We'll create a new master template called 'global.pt' in the `templates` folder. We can use the `welcome.pt` template as the starting point.

The key change is the 'metal:define-macro' line::

	<!DOCTYPE html>
	<html 
	      xmlns:metal="http://xml.zope.org/namespaces/metal"
	      xmlns:tal="http://xml.zope.org/namespaces/tal"
	      metal:define-macro="layout">
        <title>${page_title}</title>
	<head>
	     <style>
		<!--
		@import url(http://dl.dropbox.com/u/1004432/decogrids-12-gapless.css);
		-->
	      </style>
	</head>
	<body>

	     <div id="row-1" class="row">
		   <div class ="cell position-0 width-3">
			 <p class="app-welcome">
			   Welcome to <span class="app-name">${project}</span>,
			   an application generated by<br/>
			   the Pyramid web application development framework.
			 </p>
		 </div>
		   <div class ="cell position-3 width-6">the menu</div>
		   <div class ="cell position-9 width-3">search</div>
	     </div>
	     <div id="row-2" class="row">
		   <div class ="cell position-0 width-3">submit a recipe</div>
		   <div class ="cell position-3 width-9">highlight recipes</div>
	     </div>
	     <div id="row-3" class="row">
		   <div class ="cell position-0 width-3">popular ingredients</div>
		   <div class ="cell position-3 width-4">new recipes box</div>
		   <div class ="cell position-7 width-5">popular recipes box</div>
	     </div>
	     <div id="row-4" class="row">

		   <div class ="cell position-3 width-9">Recipe Categories</div>
	     </div>
	     <div id="row-5" class="row">
		   <div class ="cell position-0 width-3">I heart Recipes</div>
		   <div class ="cell position-3 width-4">footer stuff</div>
		   <div class ="cell position-7 width-5">social stuff</div>
	     </div>
	</body>




Discussion
-----------

- If you've worked with standard PHP you may notice a difference between the view/template approach
  and the standard approach of embedding html and logic in PHP. 

- 

Lab Exercises
--------------

#. Try adding the following to any of your .pt templates::

	${request}

   Observe the output.


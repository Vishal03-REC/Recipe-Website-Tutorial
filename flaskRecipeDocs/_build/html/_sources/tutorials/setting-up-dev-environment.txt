.. index::
   single: development
   single: setup

.. _setting_up_dev_chapter:

Part 2 - Setting up your development environment and starting and application 
===============================================================================

We have a lot to cover today including:

- Installing Flask using our bootstrapflask.py method
- Working with the on campus proxy
- Trying out Flask
- Building A Basic Application

It is recommended that you use a UNIX/Linux environment, though everything should also work on Windows.

.. note:: **Deployment** - We will deploy our earlier projects on Fluxflex (a cloud hosting platform) and later we will use Google App Engine (GAE). Google App Engine is sometimes called a 
 platform as a service (PAAS) because it provides specific utilities for things like data persistence, authentication and user management. If you don't mind following "the Google way" the benefit is a free option for getting started on infrastructure provided by Google. 

.. attention:: App Engine is not perfect for every type of solution, a recent `discussion about App Engine charges`_ illustrates clearly that some applications don't match very well with GAE.

If you are on a network with a proxy then pay careful attention to the next section.

.. _dealing_with_proxies:

Dealing with on campus proxies
-------------------------------

.. note:: All the examples below are specific to the UWI Mona network, but should be applicable to other 
  locations that use a proxy on their network.

**Known UWI proxies** 
	scalpel, proxy-cluster, proxy1, proxy3, sword
        while we use `scalpel` in our examples
        any of the ones listed should work

- All proxies are configured to run on port 8080. 

After launching the terminal (or commandline) it is important to set the http_proxy
environmental variable, BEFORE running any other command

**On Unix** 

::

   export http_proxy=proxy3:8080

**On Windows** 

the same can be acheived by using `set` instead of `export`::


   set http_proxy=proxy3:8080

.. note:: For persons using `sudo` on Unix. Be careful if you use `sudo` on Unix, `sudo` may not inherit the http_proxy environment variable if you set it without `sudo`.

.. _virtualenv_section:

Using Bootstrapflask.py to setup Flask and Virtualenv
-------------------------------------------------------

Bootstrapflask.py is a single file which creates a complete python environment with the 
flask package installed without the need for administrative access.

The only assumption is that you have a working python interpreter already installed.

.. note:: On OS X you will also need to install Xcode so that you have developertools 

Download http://dl.dropbox.com/u/1004432/bootstrapflask.py

Then follow the instructions below:

To install flask  and virtualenv place bootstrapflask.py in the target folder of your choice and run (set your `http_proxy` if you need to do that)::

   python bootstrapflask.py

This creates a virtual environment called ``venv``.
When ever you need to use this environment it can be activated using the following commands::

   source venv/bin/activate

On Windows the following is enough::

   venv\Scripts\activate

.. note::  

   Remember to activate your virtual environment!
       .. image:: ../images/activate.gif

   If you don't use an active virtual environment
   things may deviate from behaviour outlined in this documentation
   for example you will get permission errors and other strange behaviour.

Trying out Flask
-----------------

It's time to try out Flask in our new virtual environment (venv) created in the steps above.

.. note::   .. image:: ../images/activate.gif
   Remember to activate your virtual environment!

Let's see that everything is working.

Create a file called `app.py`
And make it look like this:

.. literalinclude:: ../hello.py

To view the new application in your browser run the following command::

    source venv/bin/activate
    python app.py

.. warning:: sometimes this will fail because another service on your machine may already be running on the port  (you can change the port in the `app.py` file or stop the conflicting service).

Visiting http://localhost:8080 in your browser will show the result of the code.


Building A Basic Application
------------------------------

Let's continue by building our first simple application. We'll borrow from a tutorial in the `Flask documentation`_ in which we create a new application called `Flaskr`.

.. note::  .. image:: ../images/activate.gif
   Remember to activate your virtual environment!
   also review :ref:`dealing_with_proxies` for setting your http_proxy
   environment variable

1. Download and unzip the Recipe tutorial 2 http://dl.dropbox.com/u/1004432/recipe_tut2.zip

2. Change to the recipe_tut2 directory (for your convenience we've included bootstrapflask.py, so you can get started quickly and activate a virtualenv)::

      cd recipe_tut2
      python bootstrapflask.py
      source venv/bin/activate

   The resulting directory structure will look something like::

	recipe_tut2/
	├── static
	│   ├── css
	│   ├── images
	│   └── js
	│       └── libs
	└── templates
	└── venv

3. Most of the tutorial steps for building Flaskr are already complete in the package, we'll need to pick up from Step 5
at http://flask.pocoo.org/docs/tutorial/views/ by configuring the views (routes). 

Once we have everything working, we'll come back to discuss what we've learnt.

Discussion
-----------
A lot has been done for us today (database configuration, templates, login and logout). In future tutorials we'll look at these aspects.

- Where's the webserver? How is it possible to access our application even though we haven't set up a webserver?

- By now you should know how to set environment variables, how do you use the terminal (on UNIX or Windows) to display environment variables?

- What happens when you set the `http_proxy` environment variable?

- We worked with `routes` and `templates` today look back at the code. 
    - Note how we rely on the following methods::

        @app.route, render_template

    - Also look at::

       `redirect` and `url_for`
   
     They appear to work together in our application. What are they doing?

- By default templates go in the `templates` folder, where is this configured in our .py application? Or is this something that is a default behaviour? 

- How does the application get all styles that make it look less plain, where is that information stored?

- Just from experience, what would you say are the key ingredients of a login/logout system?

.. _the new hotness: http://s3.pixane.com/pip_distribute.png
.. _discussion about App Engine charges: http://news.ycombinator.com/item?id=3431132
.. _Flask documentation: http://flask.pocoo.org/docs/tutorial/
